/*
IOStream
________
Input and Output Stream

q.what is the Stream
___________________
if we transper the data from one location to another location 
or one machine to machine or one file to another file called as 
stream.

if we want to send the data from one location to another 
location we need to know the path where data want to send.

if we want to works with path in java we have the 
File class from java.io package


File class is used for get the list of drive
in machine,its total space,its free space create the folder,create the file,
get the list of files and folder,delete the folder,delete teh 
file etc purpose.

Now we want to create the program to get list of drives in machine

if we want to get the list of drive we have the listRoots() method of 
File class.
it is a static method of File class 
and return the reference of File []

syntax:
File ref[]=File.listRoots();

if we want to get the space of drive we have the 
getTotalSpace() method of File class.

long getTotalSpace(): this method return the size of driver in bits format

*/
import java.io.*;
public class GetAllDrive
{
   public static void main(String x[])
   {
     File f[]=File.listRoots();
    for(int i=0;i<f.length;i++)
     {
        System.out.println(f[i]+"\t"+(f[i].getTotalSpace()/1073741824)+" GB\t"+
       (f[i].getFreeSpace()/1073741824)+" GB");

     }
   }
}


/*
how to create the folder using a File class
___________________________________________
if we want to create the folder using a File class 
we have the mkdir() method of File class

this method return true if file folder created success otherwise 
return false.

boolean exists(): this method check wheather file or folder is present 
or not if present return true otherwise return false.


import java.io.*;
public class MakeFolderApp
{
  public static void main(String x[])
   {
     File f=new File("D:\\demo123");
     boolean b1=f.exists();
      if(b1)
      { System.out.println("Folder is already exist");
      }
   else
   {
     boolean b=f.mkdir();
      if(b)
      { System.out.println("Success.........");
      }
      else
      { System.out.println("Failed.............");
      }
   }
   }
}
how to get the list of files and folder from specified drive or path
______________________________________________________________________
if we want to get the list of files and folder 
from a specified path then we have the listFiles() method of 
File class.

this method return the reference of File [] array

boolean isFile(): this method check wheather path is file or 
folder 
if file return true otherwise return false.

boolean isDirectory():
check wheather path is folder or not if folder return true 
otherwise return false.

import java.io.*;
public class GetAllFileFolder
{
   public static void main(String x[])throws Exception
   {
      File f=new File("D:\\");
      File f1[]=f.listFiles();
      for(int i=0;i<f1.length;i++)
      { 
         if(f1[i].isDirectory())
         {
          System.out.println(f1[i]);
         }
      }
     
   }
}
boolean delete(): if we want to delete the any folder or file 
delete function this function return true if folder or file 
deleted success otherwise return false.

import java.io.*;
public class DeleteFolderFile
{
  public static void main(String x[])
   {
     File f=new File("D:\\demo");
     boolean b=f.delete();
      if(b)
      { System.out.println("Deleted Success..........");
     }
    else
     { System.out.println("Some problem is there..........");
     }
   }
}

create the file using java 
______________________________
if we want to create the file using java we have the 
boolean createNewFile() 

this method return true if file created success otherwise return false

import java.io.*;
public class CreateFileApp
{
  public static void main(String x[])throws Exception
  {
     File f=new File("D:\\demo123\\resume.txt");
     boolean b=f.createNewFile();
     if(b)
     { System.out.println("Success.........");
     }
     else
     { System.out.println("Failed..........");
     }
  }
}

once we create the file then we can write data in it 
or read data from it.

if we want to write or read data in file we have the 
two types of classes in java

    i)Writer or Reader classes  : if we want to write the data 
in text format then we can use the Writer or Reader classes
e.g if we want to work with text file,document file etc


   ii)Stream classes : if we want to work with byte format 
  we have the stream classes 
if we want to work with image,audio,video etc 

if we want to work with Writer classes we have the following classes

    
			java.io.Writer
                              |
     ____________________________________________________________
    |                         |                 |                |
  OutputStreamWriter       BufferedWriter   PrintWriter  StringWriter
    |
  FileWriter

in above hierarchy the top most class is Writer class
it is abstract class and which contain the some abstract methods 
for write data in file.

all are the methods of Writer is abstract 

void write(char):this method is used for write the single single
character in file.

void write(char[]): this method is used for write the complete
character array data in file 

void write(String) : this method is used for write the 
String data in file.

void write(char [],int offset,int length)
this method is used for write the specified length data in file

char []: it is actual data present 
int offset: it is index location from data want to write
int length : indicate the actual length  of data want to write 
in file

void write(String ,int offset,int length)

this method is used for write the specified length data in file

String : it is actual data present 
int offset: it is index location from data want to write
int length : indicate the actual length  of data want to write 
in file

void close()


FileWriter 
_________
FileWriter is used for write the data in file 

constructor of FileWriter
______________________________
FileWriter(String path): this constructor accept the file path using 
string format.

e.g FileWriter fw=new FileWriter("D:\\abc\\demo.txt");

FileWriter(File path): this constructor accept the file path 
using File class reference.
 
FileWriter(String path,boolean append);
String path: accept the file path using a String format

boolean append: if we pass true here then file use the append mode
if we pass false then file use the write mode 
it is by default false.

FileWriter(File path,boolean);

File path: accept the file path using a String format

boolean append: if we pass true here then file use the append mode
if we pass false then file use the write mode 
it is by default false.

*/
import java.io.*;
public class WriteDataInFile
{
   public static void main(String x[])throws Exception
   {
     FileWriter fw=new FileWriter("D:\\demo123\\resume.txt");
    DataInputStream xyz=new DataInputStream(System.in);

    String data;
    System.out.println("Enter the data in file");
     data=xyz.readLine();

      fw.write(data);

    fw.close();
   System.out.println("Success............");
   }
}

.............................................................................................................
/*
how to read the text file using java 
______________________________
if we want to read the text file using a java 
we have the Reader class 

		
			Reader
			  |
                      ________________________________________________
                     |                                                         |                          |
            InputStreamReader            BufferedReader         StringReader 
                    |
          FileReader

Reader is a parent class of all text data reading classes.
it is abstract class 
it contain the some abstract methods for data reading purpose.

int read(): this method read the single character data
from file and return -1 when file has no data or 
when file is end.

int read(char[]): read the complete data in the form array 
and return its length or return -1 when file is end
or file has no data.

int read(char [],int offset,int length):

char []: contain the actual data read from file
int offset :indicate the index from data want to read
int length: indicate actual data want to read

Now we want to work with FileReader class
____________________________________________

constructor of FileReader class
_____________________________

FileReader(File path): accept the file path in the form 
File class reference.
 
FileReader(String path): accept the file path in the form of 
String format.

import java.io.*;
public class ReadFileContent
{
  public static void main(String x[])throws Exception
  {
   FileReader fr=new FileReader("C:\\Program Files\\Java\\jdk1.8.0_161\\bin\\MyDivApp.java");
   int data;
   while((data=fr.read())!=-1)
    {
     char ch=(char)data;
     System.out.print(ch);
       Thread.sleep(300);
      
    }
  }
}

BufferedWriter class
______________________
BufferedWriter class is used for write the data
on new line in file

if we use the FileWriter class and if we use the append 
mode with FileWriter then data add at the end of file 
but on single line not on new line

if we want to add the data on new line we have the 
BufferedWriter class

BufferedWriter class contain the newLine() method 
which is used for write the data on new line in file


constructor of BufferedWriter class
____________________________________

BufferedWriter(Writer): 
BufferedWriter constructor contain the reference of Writer 
means we can pass here reference of any child class of 
Writer in BufferedWriter constructor.


import java.io.*;
public class WriteDataOnNewLine
{
   public static void main(String x[])throws Exception
   {
     FileWriter fw=new FileWriter("D:\\demo123\\testnew.txt",true);
     BufferedWriter bw=new BufferedWriter(fw);
     
    DataInputStream xyz=new DataInputStream(System.in); 
  
     System.out.println("Enter the data in file");
  do
   {
     String data=xyz.readLine();
      if(data.equals("stop"))
      { break;
      }
    bw.write(data);
    bw.newLine();
  }while(true);
   bw.close();
   fw.close();
  System.out.println("Success.................");

   }
}

BufferedReader class
__________________________
BufferedReader class is used for read the data 
from file using line by line.

if we use the FileReader then we can read the data from file
using a single single character or read complete 
array 
if suppose we have the very big file then it may take more time
for reading data 

so better read the data line by line we have the 
BufferedReader class 

BufferedReader class contain the readLine() function 

this function read the data line by line and if data not found 
or file end then return null

constructor of BufferedReader class
_____________________________________

syntax:
BufferedReader(Reader):

here we can pass the reference of Reader as well as 
reference of any child of Reader 

import java.io.*;
public class ReadDataLineByLine
{
  public static void main(String x[])throws Exception
  {
    FileReader fr=new FileReader("C:\\Program Files
\\Java\\jdk1.8.0_161\\bin\\MyDivApp.java");
    BufferedReader br=new BufferedReader(fr);
    String data;
    while((data=br.readLine())!=null)
    {
       System.out.println(data);
      Thread.sleep(1000);
    }
  }
}

Stream classes
___________________
Stream classes used for write the data in byte format 

there are two types of Stream classes 
______________________________________

 i)OutputStream  :OutputStream class is used for write the 
data in file using a byte format.

ii)InputStream :InputStream class is used for read the 
data from file using a byte format


			OutputStream 
                             |
     ___________________________________________________________
     |                     |                                   |
  FileOutputStream       ObjectOutputStream          ByteArrayOutputStream

OutputStream class is also abstract class and which contain the 
some abstract method for writing data in file

void write(byte); write the single single byte data in file
void write(byte[]): write the complete byte array data in file.

void write(byte[],int offset,int length): 

byte []: actual data present in array 
int offset: indicate the index from data want to write 
int length: indicate the actual length of data want to write.

FileOutputStream class
________________________

constructor of FileOutputStream class
_____________________________________

FileOutputStream(String path): this constructor is used for 
accept the file path using a string format

FileOutputStream(File path) :
this constructor is used for accept the file path using a File 
class reference format

FileOutputStream(String path,boolean mode)

String path: accept the file path using a string format
boolean mode: decide wheather file can work append mode or not 
if we set true then file can work with append mode 
otherwise work with write mode 
and by default write mode is there

FileOutputStream(File path,boolean mode)

File path: accept the file path using a string format
boolean mode: decide wheather file can work append mode or not 
if we set true then file can work with append mode 
otherwise work with write mode 
and by default write mode is there
*/
import java.io.*;
public class WriteUsingStream
{ 
   public static void main(String x[])throws Exception
   {
     FileOutputStream out=new FileOutputStream("D:\\demo123\\s.txt");
     
     DataInputStream xyz=new DataInputStream(System.in);
    
     System.out.println("Enter the data in file");
     String data=xyz.readLine();

      byte b[]=data.getBytes();

      out.write(b);
     System.out.println("Success.........");
     out.close();
   }
}


Serialization
 __________
Serialization is a process where we encrypt the object content 
and store in file or send in network 

in the case of serialization jvm automatically encrypt the 
object content internally.

steps to works with Serialization 
________________________________

1) add the java.io package in application 
   __________________________________
   import java.io.*;
2) create the pojo class and implement the Serializable interface 
   __________________________________________________________
pojo  = plain old java objects 
pojo class means a class contain the setter and getter methods.

class Employee implements Serializable
{
  private String name;
  private int id;
  private int sal;
  
  public void setName(String name)
   { this.name=name;
   }
  public String getName()
   { return name;
  }
  public void setId(int id)
   { this.id=id;
  }
  public int getId()
   { return id;
   }
  public void setSal(int sal)
   { this.sal=sal;
   }
   public int getSal()
   { return sal;
   }
}
3) create the object of ObjectOutputStream class 
   ___________________________________________

constructor of ObjectOutputStream class 
____________________________________

ObjectOutputStream(OutputStream);
________________________________
ObjectOutputStream class constructor contain the reference of 
OutputStream 
meaning is we can pass reference of any child class 
in ObjectOutputStream class constructor.

FileOutputStream ref=new FileOutputStream(String path);
ObjectOutputStream oref=new ObjectOutputStream(ref);

4) call its writeObject() method.
   ________________________

  void writeObject(Object): this method is used for write the 
any type of object in file 


*/
import java.io.*;
class Employee implements Serializable
{
  private String name;
  private int id;
  private int sal;
  
  public void setName(String name)
   { this.name=name;
   }
  public String getName()
   { return name;
  }
  public void setId(int id)
   { this.id=id;
  }
  public int getId()
   { return id;
   }
  public void setSal(int sal)
   { this.sal=sal;
   }
   public int getSal()
   { return sal;
   }
}
public class SerializableApp
{
    public static void main(String x[])throws Exception
    {
      FileInputStream in=new FileInputStream("D:\\abc\\emp.txt");
      ObjectInputStream inf=new ObjectInputStream(in);
   
     Object obj=inf.readObject();
     Employee emp=(Employee)obj;
     System.out.println(emp.getId()+"\t"+emp.getName()+"\t"+emp.getSal());

    }
}


















































































