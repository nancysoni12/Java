/*
Object class and its method 
___________________________
Object class is parent class of all java classes 

why Object is parent of all  ?
because Object class contain the some methods 
those required for every class in java 
and user defined class also use that method as per his requirment 

methods of Object class
________________________

Object clone()
int hashCode()
boolean equals(Object):
String toString()
void notify()
void notifyAll()
void wait()
void wait(int miliseconds)
void finalize()
Class getClass()
static
{
}

Object cloning concept
______________________
if we create the duplicate copy of object called as 
object clone.

why we need to create the object clone ?
___________________________________________
some time we apply the more than one references on single 
object 
and if change object using any one reference then 
object original content may be get disturb 

so if we secure your object original and 
then we can create the duplicate copy of object 
and apply processing on that 

class Add
{  int a,b;
   void setValue(int x,int y)
   { a=x;
     b=y;
   }
   void showAdd()
   { System.out.printf("Addition is %d\n",a+b);
   }
}
public class TestAddApp
{
   public static void main(String x[])
   {
       Add ad=new Add();
        ad.setValue(5,3);
       Add ad1=ad;
        ad1.setValue(10,20);
        ad.showAdd();
   }
}

How to create the object cloning in java ?
__________________________________________

i) add the java.lang package in application
  __________________________________________
 import java.lang.*;

2) create the user defined class and implement the Cloneable interface
 _______________________________________________________

class Add implements Cloneable 
{
}

Cloneable is marker interface in java 

3) create the user defined method and return same class 
   reference from it
   ________________________________________________

class Add implements Cloneable 
{
   
  public Add getInstance()throws CloneNotSupportedException
  {

  }
}


4) call the clone() method in user defined method 

clone() method return the Object class reference

only we required to cast it in class whose reference 
want to return  or whose object clone want to return 



class Add implements Cloneable 
{
   
  public Add getInstance()throws CloneNotSupportedException
  {
       Object obj=this.clone();
      Add ad=(Add)obj;
    return ad;

//return (Add)this.clone();
  }
}


class Add implements Cloneable
{  int a,b;
   void setValue(int x,int y)
   { a=x;
     b=y;
   }
   void showAdd()
   { System.out.printf("Addition is %d\n",a+b);
   }
  public Add getInstance()throws CloneNotSupportedException
  {
     Object obj=this.clone();
     Add a=(Add)obj;
     return obj;
  //return (Add)this.clone();
  }
}
public class TestAddApp
{
   public static void main(String x[])throws Exception
   {
       Add ad=new Add();
        ad.setValue(5,3);
       Add ad1=ad.getInstance();
        ad1.setValue(10,20);
        ad.showAdd();
   }
}

String toString():it is used for convert the any object in 
to string 

in every java inbuilt class java override the toString()
method and write the object to string conversion logics 

import java.util.*;
class Employee extends java.lang.Object
{
  int id;
  String name;
  long sal;

  void setDetails(int i,String n,long s)
   { id=i;
     name=n;
     sal=s;
   }
 public String toString()
 { 
   return "["+name+","+id+","+sal+"]";
 }
}
public class TestToStringApp
{
   public static void main(String x[])
   {
     Employee emp=new Employee();
     emp.setDetails(1,"Ganesh",10000);
    String str=emp.toString();
System.out.println(str);    
   } 
}

boolean equals(): method is used for object comparision purpose 
if two objects are equal then return true othrewise return false.

Q.why object comparision not perform by  == symbol ?
_____________________________________________________
because java object comparision perform on basis of 
hashcode 

Q.what is the hashcode ?
hashCode is unique integer number generated by 
jvm for every object.

jvm generate the different hashcode for every object
internally

can we see the hashcode generated by jvm for object ?
____________________________________________________
for that we have the System.identityHashCode(Object) method 
this method return the hashcode generated by jvm for object

*/
class A
{
    int d;
   A(int x)
   {d=x;
   }
}
public class ObjCompApp
{ 
   public static void main(String x[])
   {
     A a1=new A(100);
     A a2=new A(100);
System.out.println("A1 hash code is "+System.identityHashCode(a1));
System.out.println("A2 hash code is "+System.identityHashCode(a2));

    if(a1==a2)
    { System.out.println("Equals");
    }
    else
    { System.out.println("Not Equal");
    }
   }
}






































